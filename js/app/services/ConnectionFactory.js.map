{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","close","connection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAMA,oBAAqB,YAAY;AACnC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,QAAQ,IAAZ;AACA,QAAIC,aAAa,IAAjB;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAMC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAApB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAK,CAACd,UAAN,EAAmB;AACfA,yCAAaW,EAAEC,MAAF,CAASC,MAAtB;AACAd,oCAAQC,WAAWD,KAAX,CAAiBgB,IAAjB,CAAsBf,UAAtB,CAAR;AACAA,uCAAWD,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQH,UAAR;AACH,qBATD;;AAWAK,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAtBM,CAAP;AAuBH;AA9BL;AAAA;AAAA,0CAgCyBpB,UAhCzB,EAgCqC;AAC7BJ,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CxB,mCAAWyB,iBAAX,CAA6BD,KAA7B;AACH;AACDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBALD;AAMH;AAvCL;AAAA;AAAA,8CAyC6B;AACrB,oBAAI3B,UAAJ,EAAgB;AACZD;AACAC,iCAAa,IAAb;AACH;AACJ;AA9CL;;AAAA;AAAA;AAgDH,CAvDyB,EAA1B","file":"ConnectionFactory.js","sourcesContent":["const ConnectionFactory = (function () {\n    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n    let close = null;\n    let connection = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Não é possivel criar instancias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                const openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n                    if ( !connection ) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão!');\n                        }\n                    }\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) {\n                    connection.deleteObjectStore(store);\n                }\n                connection.createObjectStore(store, { autoIncrement: true});\n            });\n        }\n\n        static closeConnection() {\n            if (connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n})();\n"]}